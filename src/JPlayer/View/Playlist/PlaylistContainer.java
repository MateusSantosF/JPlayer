package JPlayer.View.Playlist;

import JPlayer.Modal.ModalCreatePlaylist;
import java.awt.BorderLayout;

import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JPanel;
import Utils.Observer.interfaces.IObserver;
import Utils.Observer.interfaces.IPublisher;
import facades.PlaylistFacade;
import java.util.Collections;
import model.Comparators.PlaylistComparatorByDate;
import model.interfaces.IPlaylist;

/**
 *
 * @author mateus
 */
public class PlaylistContainer extends javax.swing.JPanel implements IPublisher, IObserver {
    
    private final List<IObserver> observers = new ArrayList<>();
    private final PlaylistFacade facade = new PlaylistFacade();
    private IPlaylist clickedPlaylist;
    private long playlistSize;
    /**
     * Creates new form Playlist
     */
    public PlaylistContainer() {
        initComponents();
        ListAllPlayLists();
    }
    
    private void resizeScroll(){
        
        int itemsPerColumn = (int) scrollContainer.getSize().getWidth() / 100;
        
        int gap = Math.round(playlistSize/itemsPerColumn) * 50;
        int newHeight = (Math.round(playlistSize/itemsPerColumn) * 100 )+ gap;
        
        if(newHeight % 2 != 0)
            newHeight += 150;
        
        int newWidth = itemsPerColumn * 100;
              
        jPanelPlaylists.setPreferredSize(new Dimension(  newWidth, newHeight));

    }
    
    private void ListAllPlayLists(){
        jPanelPlaylists.removeAll();
        List<JPanel> capas = new ArrayList<>();
        Dimension dimension = new Dimension(100, 100);
        List<IPlaylist> playlists = facade.getAllPlaylist();
        Collections.sort(playlists, new PlaylistComparatorByDate()); // Sort to createData
      
        playlistSize = playlists.size();
            
        playlists.forEach(playlist ->{        
            JPanel panel = new JPanel();
            panel.setLayout(new BorderLayout());
            JButton button = new JButton(playlist.getTitle());
            button.setPreferredSize(dimension);
            button.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent evt){
                    clickedPlaylist = playlist;
                    notifyObservers();
                }
            });
            panel.add(button);
            capas.add(panel);
        });
        
        
        capas.forEach(item->{
            jPanelPlaylists.add(item);
        });
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollContainer = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanelPlaylists = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();

        scrollContainer.setPreferredSize(new java.awt.Dimension(200, 200));
        scrollContainer.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                scrollContainerComponentResized(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(16, 6));

        jPanelPlaylists.setMinimumSize(new java.awt.Dimension(300, 200));
        jPanelPlaylists.setPreferredSize(new java.awt.Dimension(100, 500));
        jScrollPane2.setViewportView(jPanelPlaylists);

        javax.swing.GroupLayout scrollContainerLayout = new javax.swing.GroupLayout(scrollContainer);
        scrollContainer.setLayout(scrollContainerLayout);
        scrollContainerLayout.setHorizontalGroup(
            scrollContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        scrollContainerLayout.setVerticalGroup(
            scrollContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
        );

        jPanel1.setBackground(new java.awt.Color(34, 34, 34));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBackground(new java.awt.Color(34, 34, 34));

        jButton2.setText("Create New Playlist");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jButton2)
                .addContainerGap(313, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jButton2)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(scrollContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void scrollContainerComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_scrollContainerComponentResized
         resizeScroll();
    }//GEN-LAST:event_scrollContainerComponentResized

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       
        ModalCreatePlaylist modal = new ModalCreatePlaylist();
        modal.addObserver(this);
        modal.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelPlaylists;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel scrollContainer;
    // End of variables declaration//GEN-END:variables

    @Override
    public void addObserver(IObserver observer) {
        observers.add(observer);
    }

    @Override
    public void removeObserver(IObserver observer) {
        observers.remove(observer);
    }

    @Override
    public void notifyObservers() {
        
        observers.forEach(ob ->{
            ob.update(clickedPlaylist);
        });
       
    }

    @Override
    public void update(Object publisher) {

        if( publisher  instanceof Boolean ){
            
            if( ((Boolean)publisher) ){ // True if sucess insert playlist in database
                ListAllPlayLists();
            }
        }
    }

}
